#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: mia0x75
#=================================================
name: Matrix Build

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build'
        required: true
        default: 'openwrt-24.10' # Default Branch to Build
      debug:
        description: 'Enable Debug'
        type: boolean
        required: false
        default: false

  repository_dispatch:
    types: [Matrix Build]

#            ┌───────────── minute (0 - 59)
#            │ ┌───────────── hour (0 - 23)
#            │ │ ┌───────────── day of the month (1 - 31)
#            │ │ │ ┌───────────── month (1 - 12)
#            │ │ │ │ ┌───────────── day of the week (0 - 6) (Sunday to Saturday)
#            │ │ │ │ │
#            │ │ │ │ │
#            * * * * *
  schedule:
    - cron: '0 0 5 * *'

permissions:
  contents: write
  packages: write
  actions: write

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  PRE_FEEDS_UPDATE: 00-feeds-update.sh
  SOURCE_PATCH: 01-source-patch.sh
  POST_FEEDS_UPDATE: 99-feeds-update.sh
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    strategy:
      fail-fast: false
      matrix:
        target: [Intel-x86-64, Phicomm-K2P, NanoPi-R5s, NanoPi-R5c, Redmi-AX6000, Cudy-TR3000v1, Cudy-TR3000v1-uboot]
        include:
          - target: Intel-x86-64
            config: intel-x86-64-full.config
            tag: Intel-x86_64
          - target: Phicomm-K2P
            config: phicomm-k2p-full.config
            tag: Phicomm-K2P
          - target: NanoPi-R5s
            config: nanopi-r5s-minimal.config
            tag: NanoPi-R5s
          - target: NanoPi-R5c
            config: nanopi-r5c-minimal.config
            tag: NanoPi-R5c
          - target: Redmi-AX6000
            config: redmi-ax6000-full.config
            tag: Redmi-AX6000
          - target: Cudy-TR3000v1
            config: cudy-tr3000v1-uboot-full.config
            tag: Cudy-TR3000v1
          - target: Cudy-TR3000v1-uboot
            config: cudy-tr3000v1-uboot-full.config
            tag: Cudy-TR3000v1-uboot

    name: "构建固件"
    outputs:
      tag: ${{ steps.version.outputs.tag }}
      branch: ${{ steps.version.outputs.branch }}
      built_month: ${{ steps.version.outputs.built_month }}

    steps:
    - name: 签出当前代码库最新代码
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT }}

    - name: 获取待构建的固件版本标签
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          branch="${{ github.event.inputs.branch }}"
        else
          branch="${{ github.event.client_payload.branch }}"
        fi
        tag=$(echo "$branch" | cut -d'-' -f2)
        built_month=$(date '+%Y-%m')
        echo "tag=v${tag}" >> $GITHUB_OUTPUT
        echo "branch=${branch}" >> $GITHUB_OUTPUT
        echo "built_month=${built_month}" >> $GITHUB_OUTPUT

    - name: 克隆特定标签的固件代码库代码到本地
      run: |
        echo "服务器配置信息："
        echo "_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/"
        echo "_/ 处理器："
        echo "_/ 处理器数量：(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo "_/ 核心数量：$(nproc)"
        echo -e "_/ 处理器型号：$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')"
        echo "_/"
        echo "_/ 内存信息："
        sudo lshw -short -C memory | grep GiB | awk '{print "_/ " $0}'
        echo "_/"
        echo "_/ 硬盘信息："
        echo "_/ 硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT | awk '{print "_/ " $0}'
        echo "_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/"

        sudo mkdir -p /mnt/workdir
        sudo chown $USER:$GROUPS /mnt/workdir
        cd /mnt/workdir

        git clone $REPO_URL openwrt
        ln -sf /mnt/workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        git fetch --all
        git checkout ${{ steps.version.outputs.branch }}

        COMMIT_AUTHOR=$(git show -s --date=short --format="作者: %an")
        echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_ENV
        COMMIT_DATE=$(git show -s --date=short --format="时间: %ci")
        echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_ENV
        COMMIT_MESSAGE=$(git show -s --date=short --format="内容: %s")
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
        COMMIT_HASH=$(git show -s --date=short --format="hash: %H")
        echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo timedatectl set-timezone "$TZ"
        sudo apt-get -qq update --fix-missing
        sudo apt full-upgrade -y

        # https://openwrt.org/docs/guide-developer/toolchain/install-buildsystem#examples_of_package_installations
        # for ubuntu-22.04
        sudo apt-get -y -qq install build-essential clang flex bison g++ gawk \
          gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev upx-ucl \
          python3-distutils rsync unzip zlib1g-dev file wget qemu-utils xz-utils > /dev/null
        sudo pip3 install pyelftools
        sudo apt-get -qq autoremove --purge
        sudo apt-get -qq clean
        # using upx 5.0.0
        wget https://github.com/upx/upx/releases/download/v5.0.0/upx-5.0.0-amd64_linux.tar.xz
        tar -xJf upx-5.0.0-amd64_linux.tar.xz
        sudo cp upx-5.0.0-amd64_linux/upx /usr/bin
        #
        sudo systemctl daemon-reload
        echo
        echo "_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/"
        echo "_/ 磁盘空间"
        echo "_/"
        df -h | awk '{print "_/ " $0}'
        echo "_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/"

    - name: 加载自定义软件源
      run: |
        cd openwrt
        sh $GITHUB_WORKSPACE/scripts/$PRE_FEEDS_UPDATE

    - name: 更新软件源
      run: |
        cd openwrt
        ./scripts/feeds update -a

    - name: 安装软件源
      run: |
        cd openwrt
        ./scripts/feeds install -a
        ./scripts/feeds install -a -p packages

        # if [ "${{ matrix.target }}" == "Phicomm-K2P" ]; then
        # fi

        if [ "${{ matrix.target }}" != "Phicomm-K2P" ]; then
          sh $GITHUB_WORKSPACE/scripts/$SOURCE_PATCH
        fi

    - name: 加载编译配置文件
      run: |
        [ -e files ] && cp -R files openwrt/files
        if [ -e devices/${{ matrix.config }} ]; then
          # 共享配置文件，仅做必要的替换和删除
          if [ "${{ matrix.tag }}" = "Cudy-TR3000v1" ]; then
            sed -i 's/^# \(CONFIG_TARGET_mediatek_filogic_DEVICE_cudy_tr3000-v1\) is not set$/\1=y/' devices/${{ matrix.config }}
            sed -i 's/^CONFIG_TARGET_mediatek_filogic_DEVICE_cudy_tr3000-v1-ubootmod=y$/# CONFIG_TARGET_mediatek_filogic_DEVICE_cudy_tr3000-v1-ubootmod is not set/' devices/${{ matrix.config }}
            sed -i 's/^CONFIG_TARGET_PROFILE="DEVICE_cudy_tr3000-v1-ubootmod"$/CONFIG_TARGET_PROFILE="DEVICE_cudy_tr3000-v1"/' devices/${{ matrix.config }}
            sed -i '/^CONFIG_PACKAGE_trusted-firmware-a-mt7981-cudy-tr3000-v1=y$/d' devices/${{ matrix.config }}
            sed -i '/^CONFIG_PACKAGE_u-boot-mt7981_cudy_tr3000-v1=y$/d' devices/${{ matrix.config }}
          fi

          cp devices/${{ matrix.config }} openwrt/.config
          VERSION_NUMBER=$(echo "${{ steps.version.outputs.tag }}" | sed -E 's/v([0-9]+\.[0-9]+)\.[0-9]+/\1/')
          sed -i "s/__VERSION_NUMBER__/$VERSION_NUMBER/g" openwrt/.config
        else
          exit 1
        fi

    - name: 处理编译配置文件
      id: package
      run: |
        cd openwrt
        make defconfig clean

        grep -i CONFIG_PACKAGE_luci-app .config | grep  -v \# > Plug-in
        sed -i '/INCLUDE/d' Plug-in > /dev/null 2>&1
        sed -i 's/CONFIG_PACKAGE_/  * /g' Plug-in
        sed -i 's/=y/\ /g' Plug-in
        sed -i 's/=m/\ /g' Plug-in

        echo
        echo "_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/"
        echo "_/ 已选插件列表..."
        echo "_/"
        cat Plug-in > $GITHUB_WORKSPACE/packages.txt
        sed -i 's/^  \*/_\//g' Plug-in
        cat Plug-in
        echo "_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/"
        echo -e "\n\n"

        SOURCE_REPO="$(echo $REPO_URL | awk -F '/' '{print $(NF)}')"
        echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
        DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
        DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV

    - name: 下载待编译软件包
      run: |
        cd openwrt
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        [ -e $GITHUB_WORKSPACE/settings/banner ] && cp $GITHUB_WORKSPACE/settings/banner package/base-files/files/etc

    - name: 再次检查比较编译配置文件
      run: |
        if [ "${{ github.event.inputs.debug }}" = "true" ]; then
          echo
          echo "_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/"
          echo "_/ 编译程序修正后的配置文件 ..."
          echo "_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/"
          echo
          cat openwrt/.config || true
        fi
        echo
        echo "_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/"
        echo "_/ 编译程序修正后的变化 ..."
        echo "_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/"
        echo
        diff $GITHUB_WORKSPACE/devices/${{ matrix.config }} openwrt/.config || true

        cd openwrt
        # 修改主机名称
        if [ "${{ matrix.tag }}" = "Intel-x86-64" ]; then
          sed -i 's/ImmortalWrt/OpenWRT-amd64/g' package/base-files/files/bin/config_generate
        else
          sed -i 's/ImmortalWrt/${{ matrix.tag }}/g' package/base-files/files/bin/config_generate
        fi
        sh $GITHUB_WORKSPACE/scripts/$POST_FEEDS_UPDATE

    - name: 编译固件
      id: compile-firmware
      run: |
        set -e
        cd openwrt

        make -j$(nproc) toolchain/install

        if [ "${{ github.event.inputs.debug }}" = "true" ]; then
          tree -a -L 1 -h -D -p --du staging_dir/host/bin
          make -j1 V=sc
        else
          make -j$(nproc) || make -j1 V=sc
        fi
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 组织文件
      id: organize
      if: steps.compile-firmware.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*

        if [ "${{ github.event.inputs.debug }}" = "true" ]; then
          tree .
        fi

        rm -rf packages
        if [ "${{ github.event.inputs.debug }}" = "true" ]; then
          tree .
        fi

        # ├── config.buildinfo
        # ├── feeds.buildinfo
        # ├── openwrt-24.10-immortalwrt-xxxxxx
        # ├── profiles.json
        # ├── sha256sums
        # └── version.buildinfo

        #
        VERSION_NUMBER=$(echo "${{ steps.version.outputs.tag }}" | sed -E 's/v([0-9]+\.[0-9]+)\.[0-9]+/\1/')
        for file in openwrt-${VERSION_NUMBER}-immortalwrt-*; do
          mv "$file" "${file#openwrt-${VERSION_NUMBER}-immortalwrt-}"
        done

        if [ "${{ github.event.inputs.debug }}" = "true" ]; then
          echo
          echo "_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/"
          echo "_/ 待发布文件列表..."
          echo "_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/"
          tree .
          echo
        fi
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV

        echo "发布版本：${{ steps.version.outputs.tag }}" > $GITHUB_WORKSPACE/release.txt
        echo "平台架构：${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}" >> $GITHUB_WORKSPACE/release.txt
        echo "固件源码：${{ env.REPO_URL }}" >> $GITHUB_WORKSPACE/release.txt
        echo "内核版本：$(cat *.manifest | grep ^kernel | cut -d- -f2 | tr -d ' ')" >> $GITHUB_WORKSPACE/release.txt
        echo "默认地址：192.168.1.1" >> $GITHUB_WORKSPACE/release.txt
        echo "默认密码：空" >> $GITHUB_WORKSPACE/release.txt
        echo "构建日期：${{ env.DATE }}" >> $GITHUB_WORKSPACE/release.txt
        echo "插件列表：" >> $GITHUB_WORKSPACE/release.txt
        echo "" >> $GITHUB_WORKSPACE/release.txt
        cat $GITHUB_WORKSPACE/packages.txt >> $GITHUB_WORKSPACE/release.txt

        rm -rf $GITHUB_WORKSPACE/Plug-in
        RELEASE_BODY=$(cat $GITHUB_WORKSPACE/release.txt)
        echo "RELEASE_BODY<<EOF" >> $GITHUB_ENV
        echo "$RELEASE_BODY" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

        echo "status=success" >> $GITHUB_OUTPUT

    - name: 查看编译输出
      if: steps.organize.outputs.status == 'success' && !cancelled()
      run: ls -lah ${{ env.FIRMWARE }}

    - name: 上传到临时位置
      if: steps.organize.outputs.status == 'success' && !cancelled()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.tag }}-immortalwrt
        path: ${{ env.FIRMWARE }}/

    - name: 比较编译输出
      if: steps.organize.outputs.status == 'success' && !cancelled()
      run: ls -lah ${{ env.FIRMWARE }}

    - name: 上传到发布页面
      id: release
      if: steps.organize.outputs.status == 'success' && !cancelled()
      uses: svenstaro/upload-release-action@v2
      env:
        TAG: ${{ steps.version.outputs.tag }}
        BUILT_MONTH: ${{ steps.version.outputs.built_month }}
      with:
        file: ${{ env.FIRMWARE }}/*
        file_glob: true
        tag: ${{ matrix.tag }}-${{ env.TAG }}@${{ env.BUILT_MONTH }}
        overwrite: true
        body: ${{ env.RELEASE_BODY }}

    - name: 移除已过时的旧版本
      if: steps.release.outputs.browser_download_url != '' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      uses: dev-drprasad/delete-older-releases@v0.3.4
      with:
        keep_latest: 3
        delete_tag_pattern: ${{ matrix.tag }}
        delete_tags: true

  update-repo:
    needs:
      - build
    runs-on: ubuntu-latest
    name: "更新当前代码库"
    env:
      TAG: ${{ needs.build.outputs.tag }}
      BRANCH: ${{ needs.build.outputs.branch }}

    steps:
      - name: 签出当前代码库
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT }}

      - name: 更新对应代码
        id: update-code
        run: |
          sed -i "s/\(latest.*:\).*/\1 ${{ env.BRANCH }}/" README.md
          sed -i "/# Default Branch to Build/s/\(default[[:space:]]*:\).*/\1 '${{ env.BRANCH }}' # Default Branch to Build/" .github/workflows/matrix.yml

          git checkout --orphan tmp_work
          git branch -D main
          DATE="$(date '+%Y/%m/%d')"
          COMMENT="Build to ${{ env.TAG }} by Github Actions, ${DATE}"

          git branch -m main
          echo "msg=$COMMENT" >> $GITHUB_OUTPUT

      - name: 提交并推送代码
        env:
          MSG: ${{ steps.update-code.outputs.msg }}
        uses: actions-js/push@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          message: ${{ env.MSG }}
          force: true

      - name: 移除当前脚本运行历史
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          delete_workflow_pattern: "Matrix Build"
          retain_days: 0
          keep_minimum_runs: 10
          delete_run_by_conclusion_pattern: "cancelled, skipped, success"
